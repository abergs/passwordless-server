@page "/credentials/user/{userid}"
@model UserModel
@inject Microsoft.Extensions.Options.IOptionsSnapshot<PasswordlessOptions> passwordlessOptions


@{
  ViewData["Title"] = "Home page";
}

<div class="text-centerc" id="vue">
  <h1>User Details</h1>
  <p>This pages summarizes the information for user <span class="badge bg-dark">@Model.UserId</span></p>

  <div>
    <h2>Credentials</h2>
    @* <div class="mb-5">
      <h6>Add new credential</h6>
      <form v-on:submit.prevent="createNewCredential" class="form-width">
        <div class="input-group ">
          <input type="text" name="nickname" id="nickname" class="form-control" placeholder="Nickname for the passkey">
          <button class="btn btn-primary">Register</button>
        </div>
      </form>
    </div> *@

    <h6>Existing credential</h6>
    @if (Model.Credentials.Count == 0)
    {
      <p>No credentials registered for this user</p>
    }
    <div class="credential-wrapper">
      @foreach (var cred in Model.Credentials)
      {
        <div class="credential">
          <h2 class="text-center">@(cred.Device)</h2>
          <h6 class="text-center">@(cred.Nickname ?? "No nickname")</h6>

          <div>
            @* <span class="strong">UserId: </span><span>@cred.UserId</span><br/> *@
            <span class="strong">Created:</span><span>@cred.CreatedAt</span><br />
            <span class="strong">Last used: </span><span>@cred.LastUsedAt</span>
          </div>

          <button class="mt-3 btn btn-sm btn-secondary" v-cloak v-on:click="onShow" v-if="!showDetails">Show
            details</button>
          <button class="mt-3 btn btn-sm btn-secondary" v-cloak v-on:click="onShow" v-if="showDetails">Hide
            details</button>

          <div v-if="showDetails" v-cloak>
            <hr>
            <div class="mt-3">
              <h6>Details</h6>
            </div>

            <div>
              <span class="strong">Credential Id: </span><small
              class="font-monospace">@cred.Descriptor.Id.ToBase64Url()</small><br />
              <div class="mt-2"></div>
              <span class="strong">Public Key: </span><small
              class="text-break font-monospace">@cred.PublicKey.ToBase64Url()</small><br />
              <hr>
              <span class="strong">Type: </span><small class="text-break font-monospace">@cred.CredType</small><br />
              <span class="strong">Counter: </span><small
              class="text-break font-monospace">@cred.SignatureCounter</small><br />
              <span class="strong">RPID: </span><small class="text-break font-monospace">@cred.RPID</small><br />
              <span class="strong">Origin: </span><small class="text-break font-monospace">@cred.Origin</small><br />
              <span class="strong">AaGuid: </span><small class="text-break font-monospace">@cred.AaGuid</small><br />

            </div>

            <a asp-page="Delete" asp-route-userid="@Model.UserId"
            asp-route-credentialId="@cred.Descriptor.Id.ToBase64Url()" type="button"
            class="mt-3 btn btn-sm btn-primary">Remove</a>
          </div>
        </div>
      }
    </div>
    <div>
      <h2 class="mt-5">Alias</h2>
      <p>Aliases that are hashed cannot be viewed.</p>
      <div class="aliases">
        <ul>
          @foreach (var alias in Model.Aliases)
          {
            @* <i class="bi bi-trash3 link-danger"></i> *@
            @if(!string.IsNullOrEmpty(alias.Plaintext)) {
              <li>@alias.Plaintext</li>
            } else {
              <li>Hashed alias</li>
            }
          }
        </ul>
      </div>
    </div>

    <div>
      <h2 class="mt-5">Audit logs</h2>
      <table class="table">
        <thead>
          <tr>
            <th scope="col">Timestamp</th>
            <th scope="col">Level</th>
            <th scope="col">Message</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var log in Model.AuditLogs)
          {
            <tr>
              <th scope="row">@log.Timestamp</th>
              <td><span class="badge bg-@log.Level">@log.Level</span></td>
              <td>@log.Message</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
  <h5 class="mt-5">Todo</h5>
  <ul>
    <li>Allow a tenant to disable hashing</li>
    <li>Allow to list all aliases</li>
    <li>Allow to add one without removing all</li>
  </ul>
</div>
<style>
  .credential-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .credential {
    background: #eee;
    padding: 15px;
    border-radius: 6px;
  }
</style>

@section Scripts {
<script src="https://cdn.passwordless.dev/dist/0.4.0/passwordless.iife.js"></script>
<script type="module">
  import { createApp, ref } from 'vue';
  createApp({
    setup() {
      const showDetails = ref(false);
      const onShow = () => {
        showDetails.value = !showDetails.value;
      }

      const p = new Passwordless.Client({
        apiUrl: "@passwordlessOptions.Value.ApiUrl",
        apiKey: "@passwordlessOptions.Value.ApiKey"
      });

      const createNewCredential = () => {
        // Get register token from server side rendering
        p.register("@Model.RegisterToken");
      }

      return {
        showDetails,
        onShow,
      }
    }
  }).mount('#vue');
</script>
}